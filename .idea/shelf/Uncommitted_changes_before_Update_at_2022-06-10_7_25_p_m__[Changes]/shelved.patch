Index: src/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\nimport javafx.animation.AnimationTimer;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.transform.Scale;\r\nimport javafx.scene.transform.Translate;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport javafx.scene.media.*;\r\nimport java.io.File;\r\n/**\r\n * <p>\r\n * This file acts as the class that initializes and creates the different levels, menu\r\n * splash screen and bosses in the game. It essentially ties every other class together\r\n * so that the driver can work more cleanly.\r\n * </p>\r\n *\r\n * <h2>ICS 4U0 with Krasteva, V.</h2>\r\n *\r\n * @version 3.0\r\n * @author Ryan Atlas, Samuel Huang and Daniel Morgan\r\n * @since May 18th, 2022\r\n * <p>\r\n * Ten minutes were spent by Ryan Atlas on this file on May 18th, 2022.\r\n * 2 hours were spent by Daniel Morgan on this file over May 27th and 28th, 2022.\r\n * 2 hours were spent by Daniel Morgan May 30th-June 3rd fixing collision and physics\r\n * 2 hours were by Ryan Atlas June 1st-3rd working on moving between screens and creating levels\r\n * 30 minutes were spent by Samuel Huang on June 3rd working on the animation timeline and splash screen/menu methods\r\n * </p>\r\n */\r\npublic class Game {\r\n    /** Camera zoom factor */\r\n    public static final float ZOOM = 1.0f;\r\n    /** If we are currently playing in debug mode */\r\n    public static final boolean IS_DEBUG_MODE = true;\r\n    /** Gravity applied to all moveable objects */\r\n    public static final float GRAVITY = 0.01f;\r\n    /** ArrayList of gameobjects in the current scene */\r\n    private static ArrayList < GameObject > gameObjects = new ArrayList < GameObject > ();\r\n    /** Current scene*/\r\n    private static Scene scene;\r\n    /** The instance of the player */\r\n    public static GameObject player;\r\n    /** Current group of scene layers: foreground/background/midground */\r\n    private Group sceneGroup = new Group();\r\n    /** Individual scene layers to contain rendered objects: foreground */\r\n    private static Group foreground = new Group();\r\n    /** Individual scene layers to contain rendered objects: midground*/\r\n    private static Group midground = new Group();\r\n    /** Individual scene layers to contain rendered objects: background */\r\n    private static Group background = new Group();\r\n    /** Array of levels in the game */\r\n    private static Level[] levels;\r\n    /** Game's current level*/\r\n    private static Level level;\r\n    /** The position of the camera */\r\n    public static Vector cameraPos = new Vector(0, 0);\r\n    /** Media player for music*/\r\n    private MediaPlayer mediaPlayer;\r\n    /** Whether the current door can be opened*/\r\n    public static boolean canOpenDoor;\r\n    /** Whether the object in the current level is picked up by the user*/\r\n    public static boolean objectFound;\r\n    /** Whether the all questions are answered correctly*/\r\n    public static int questionsCorrect;\r\n    public static boolean[] signsRead;\r\n    /** Programatic representation of scene layers */\r\n    public static enum SceneLayer {\r\n        FOREGROUND,\r\n        MIDGROUND,\r\n        BACKGROUND\r\n    }\r\n    /** Reference to the current window object */\r\n    public static Stage window;\r\n    /**\r\n     * Inits a game scene\r\n     * @param w The window to use for the game\r\n     */\r\n    public Game(Stage w) {\r\n        window = w;\r\n        window.setTitle(\"Caged Inside the Mind\");\r\n        window.setMinWidth(Main.getWidth());\r\n        window.setMinHeight(Main.getHeight());\r\n        window.setResizable(true);\r\n        canOpenDoor = false;\r\n        objectFound = false;\r\n        questionsCorrect = 0;\r\n        signsRead = new boolean[4];\r\n        // render the background, then midground, then foreground first\r\n        w.widthProperty().addListener((obs, oldVal, newVal) -> {\r\n            Main.setWidth(newVal.intValue());\r\n        });\r\n        w.heightProperty().addListener((obs, oldVal, newVal) -> {\r\n            Main.setWidth(newVal.intValue());\r\n        });\r\n        // add layers to sceneGroup\r\n        sceneGroup.getChildren().addAll(foreground, midground, background);\r\n        // add sceneGroup to the window and create the scene\r\n        buildScene(sceneGroup);\r\n        // add a player and platform to the scene\r\n        player = attachObject(new Player(-1000, 0), SceneLayer.FOREGROUND);\r\n        levels = new Level[2];\r\n        levels[0] = new Level1();\r\n        levels[1] = new Level2();\r\n        createLevel(levels[0]);\r\n        Player.playerMoving = true;\r\n        // set the current scene\r\n        window.setScene(scene);\r\n    }\r\n    /**\r\n     * Tests if the passed object is touching any collidable objects in the scene\r\n     * @param object1 The object being passed in to see if it is colliding\r\n     * @return Whether an object is touching a collidable object\r\n     */\r\n    public static boolean touchingCollidable(CollidableObject object1) {\r\n        for (GameObject object2: gameObjects) {\r\n            if (object2 instanceof CollidableObject && object1 != object2) {\r\n                if (CollidableObject.touching((CollidableObject) object2, object1)) {\r\n                    return true;\r\n                }\r\n            }\r\n        };\r\n        return false;\r\n    }\r\n    /**\r\n     * Tests if the passed hitbox is touching any collidable objects in the scene\r\n     * @param parent Original object being checked\r\n     * @param hitbox Hitbox being checked\r\n     * @return Whether the hitbox is touching a collidable\r\n     */\r\n    public static boolean touchingCollidable(GameObject parent, HitBox hitbox) {\r\n        for (GameObject obj: gameObjects) {\r\n            if (obj instanceof CollidableObject && obj != parent) {\r\n                if (HitBox.areBoxesColliding(((CollidableObject) obj).getHitBox(), hitbox)) {\r\n                    return true;\r\n                }\r\n            }\r\n        };\r\n        return false;\r\n    }\r\n    /**\r\n     * Navigates the player to the next level or screen\r\n     * @param level The level to navigate to\r\n     * @param screen The screen within that level to navigate to\r\n     */\r\n    public static void navigateLevel(Level level, int screen, int teleporterLocationIndex) {\r\n        updateLevelScreen(level, screen);\r\n        createLevel(level);\r\n        ArrayList<TeleportLocation> locations = new ArrayList<TeleportLocation>();\r\n        for (GameObject obj : gameObjects) {\r\n            if (obj instanceof TeleportLocation)\r\n                locations.add((TeleportLocation)obj);\r\n        }\r\n        TeleportLocation loc = locations.get(teleporterLocationIndex);\r\n        player = attachObject(new Player(loc.pos.x, loc.pos.y), SceneLayer.FOREGROUND);\r\n        window.setScene(scene);\r\n    }\r\n    /**\r\n     * Returns the first instance of an object with the same class as the passed object\r\n     * @param obj The object with a class to specify\r\n     * @return The first instance of an object with the same class\r\n     */\r\n    public static GameObject firstInstanceOfClass(GameObject obj) {\r\n        for (GameObject child : gameObjects) {\r\n            if (child.getClass().equals(obj.getClass())) {\r\n                return child;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the ith level from the Game class\r\n     * @return The ith level from the Game class\r\n     */\r\n    public static Level getLevel(int index) {\r\n        return levels[index];\r\n    }\r\n    /**\r\n     * Creates and initializes the different levels of the game\r\n     * as they are needed.\r\n     * @param l The Level to be created\r\n     */\r\n    public static void createLevel(Level l) {\r\n        try {\r\n            ArrayList < GameObject > objects = l.getObjects();\r\n            for (GameObject obj: objects) {\r\n                attachObject(obj, SceneLayer.FOREGROUND);\r\n            }\r\n            level = l;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads the file at the index of the files array in the Level class and loads all the new\r\n     * GameObjects while clearing old ones\r\n     * @param level Current level\r\n     * @param screen Screen number to read the right file\r\n     */\r\n    public static void updateLevelScreen(Level level, int screen) {\r\n        level.levelScreen = screen;\r\n        foreground.getChildren().clear();\r\n        gameObjects.clear();\r\n\r\n    }\r\n    /**\r\n     * Creates the two boss fights in the game which are designed to teach the\r\n     * player to never give up, even when all hope seems lost\r\n     * @param boss The boss whose fight is being created\r\n     */\r\n    public void createBossfight(Boss boss) {}\r\n    /**\r\n     * Creates and displays the splash screen to the user\r\n     * @throws FileNotFoundException In case the files cannot be found\r\n     */\r\n\r\n\r\n    public void splashScreen() throws FileNotFoundException {\r\n        SplashScreen splash = new SplashScreen(window);\r\n        Media menuTheme = new Media(new File(\"Caged Main Theme.mp3\").toURI().toString());\r\n        mediaPlayer = new MediaPlayer(menuTheme);\r\n        mediaPlayer.setVolume(0.3);\r\n        mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);\r\n        mediaPlayer.play();\r\n        splash.runSplashScreen();\r\n    }\r\n\r\n    public void level1() {\r\n        if (player.pos.y >= 1500) {\r\n            navigateLevel(level, level.levelScreen, 0);\r\n        }\r\n    }\r\n    public void level2() {\r\n        if (level instanceof Level2) {\r\n            if (level.levelScreen == 0 && player.pos.x >= 4000) {\r\n                updateLevelScreen(level, 1);\r\n                createLevel(level);\r\n                player = attachObject(new Player(250, Main.getHeight() - 200), SceneLayer.FOREGROUND);\r\n                window.setScene(scene);\r\n            } else if (level.levelScreen == 0 && player.pos.y >= 1500) {\r\n                updateLevelScreen(level, 0);\r\n                createLevel(level);\r\n                player = attachObject(new Player(250, Main.getHeight() - 200), SceneLayer.FOREGROUND);\r\n                window.setScene(scene);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Adds the specified object to the game's list of objects\r\n     * and attaches it to the specified {@link SceneLayer}\r\n     * @param gameObject The GameObject to add to the scene\r\n     * @param layer The layer to add the {@link GameObject} gameObject to\r\n     * @return The added {@link GameObject}\r\n     */\r\n    public static GameObject attachObject(GameObject gameObject, SceneLayer layer) {\r\n        gameObjects.add(gameObject);\r\n        switch (layer) {\r\n            case FOREGROUND:\r\n                foreground.getChildren().add(gameObject.getNode());\r\n                break;\r\n            case MIDGROUND:\r\n                midground.getChildren().add(gameObject.getNode());\r\n                break;\r\n            case BACKGROUND:\r\n                background.getChildren().add(gameObject.getNode());\r\n                break;\r\n        }\r\n        return gameObject;\r\n    }\r\n    /**\r\n     * Method that is active as long as the player is currently playing\r\n     * the actual gameplay section of the game\r\n     * @throws FileNotFoundException For splashScreen\r\n     */\r\n    public void mainMenu() throws FileNotFoundException {\r\n        MainMenu menu = new MainMenu(window);\r\n        Instructions instructions = new Instructions(window);\r\n        Credits credits = new Credits(window);\r\n        AnimationTimer at = new AnimationTimer() {\r\n            @Override\r\n            public void handle(long l) {\r\n                if (menu.getSelection() == -1) {\r\n                    window.setScene(menu.getScene());\r\n                    menu.setSelection(0);\r\n                } else if (menu.getSelection() == 0) {\r\n                } else if (menu.getSelection() == 1) {\r\n                    Vector diff = cameraPos.mul(1);\r\n                    cameraPos = player.pos.mul(-1f).add(Main.getDims().div(2)).add(new Vector(0, 50));\r\n                    cameraPos = Vector.lerp(diff, cameraPos, 0.1f);\r\n                    for (int i = 0 ; i < gameObjects.size(); i++) {\r\n                        GameObject obj = gameObjects.get(i);\r\n                        obj.clearTransformations();\r\n                        obj.setScale(ZOOM, Main.getDims().div(2));\r\n                        obj.setTranslate(cameraPos);\r\n                        if (obj instanceof Background) {\r\n                            obj.clearTransformations();\r\n                            obj.setTranslate(cameraPos);\r\n                        }\r\n                        obj.update();\r\n                        if (gameObjects.size() == 0)\r\n                            break;\r\n                        obj.draw();\r\n                    }\r\n                    level1();\r\n                } else if (menu.getSelection() == 2) {\r\n                    instructions.controlScreens();\r\n                    window.setScene(instructions.getScene());\r\n                    if (Keyboard.isKeyDown(KeyCode.H)) {\r\n                        System.out.println(\"Works\");\r\n                        menu.setSelection(-1);\r\n                    }\r\n                } else if (menu.getSelection() == 3) {\r\n                    credits.display();\r\n                    window.setScene(credits.getScene());\r\n                    if (Keyboard.isKeyDown(KeyCode.H)) {\r\n                        System.out.println(\"Works\");\r\n                        menu.setSelection(-1);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        AnimationTimer menuTimer = new AnimationTimer() {\r\n            @Override\r\n            public void handle(long now) {\r\n                menu.checkMenu(this, at);\r\n            }\r\n        };\r\n        menu.display();\r\n        window.setScene(menu.getScene());\r\n        menuTimer.start();\r\n    }\r\n    /**\r\n     * Method that is active as long as the player is currently playing\r\n     * the actual gameplay section of the game\r\n     * @throws FileNotFoundException For splashScreen\r\n     */\r\n    public void playGame() throws FileNotFoundException {\r\n        if (!IS_DEBUG_MODE) {\r\n            splashScreen();\r\n        }\r\n        Timeline timeline = new Timeline(new KeyFrame(Duration.millis(IS_DEBUG_MODE ? 10 : 18000), ev -> {\r\n            try {\r\n                mainMenu();\r\n            } catch (FileNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }));\r\n        timeline.play();\r\n        window.show();\r\n    }\r\n    /** Converts the Vector in screen coordinates to world coordinates */\r\n    public static Vector toWorld(Vector v) {\r\n        return v.sub(cameraPos);\r\n    }\r\n    /** Converts the Vector in world coordinates to screen coordinates */\r\n    public static Vector toScreen(Vector v) {\r\n        return v.add(cameraPos);\r\n    }\r\n    /**\r\n     * Returns the scene\r\n     * @return The current scene\r\n     */\r\n    public Scene getScene() {\r\n        return scene;\r\n    }\r\n    /**\r\n     * Builds a scene with the specified group\r\n     */\r\n    public void buildScene(Group g) {\r\n        scene = new Scene(g, 1280, 720, Color.BLACK);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Game.java b/src/Game.java
--- a/src/Game.java	(revision 50433e3f7c1b54dc30d60d12232f03819bff3beb)
+++ b/src/Game.java	(date 1654897457900)
@@ -43,7 +43,7 @@
     /** If we are currently playing in debug mode */
     public static final boolean IS_DEBUG_MODE = true;
     /** Gravity applied to all moveable objects */
-    public static final float GRAVITY = 0.01f;
+    public static final float GRAVITY = 0.055f;
     /** ArrayList of gameobjects in the current scene */
     private static ArrayList < GameObject > gameObjects = new ArrayList < GameObject > ();
     /** Current scene*/
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"Caged\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"553fe913-e55d-42c6-b39e-685a80365174\" name=\"Changes\" comment=\"Doors and stuff\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/Door.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Door.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Sign.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Sign.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2ACtVqyUIfoTeN7chST7m68l7tw\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Artifacts\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\SamuelH\\Documents\\ICS 12\\ISP\\Caged\\src\\assets\\signs\" />\r\n      <recent name=\"C:\\Users\\huang\\Documents\\Samuel ICS12\\ISP 12\\Caged\\assets\\signs\" />\r\n      <recent name=\"C:\\Users\\huang\\Documents\\Samuel ICS12\\ISP 12\\Caged\\src\\assets\\keys\" />\r\n      <recent name=\"C:\\Users\\huang\\Documents\\Samuel ICS12\\ISP 12\\Caged\\src\\assets\" />\r\n      <recent name=\"C:\\Users\\ryatl\\IdeaProjects\\Caged\\assets\\doors\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ryatl\\IdeaProjects\\Caged\\assets\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"corretto-1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"JavaISP\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"553fe913-e55d-42c6-b39e-685a80365174\" name=\"Changes\" comment=\"\" />\r\n      <created>1654525427639</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1654525427639</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Changes\">\r\n      <created>1654649849678</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654649849678</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Doors and stuff\">\r\n      <created>1654653037951</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654653037951</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Changes\" />\r\n    <MESSAGE value=\"Doors and stuff\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Doors and stuff\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 50433e3f7c1b54dc30d60d12232f03819bff3beb)
+++ b/.idea/workspace.xml	(date 1654898630274)
@@ -7,8 +7,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="553fe913-e55d-42c6-b39e-685a80365174" name="Changes" comment="Doors and stuff">
-      <change beforePath="$PROJECT_DIR$/src/Door.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Door.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Sign.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Sign.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/JavaISP/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/JavaISP/Game.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/JavaISP/Player.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/JavaISP/Player.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Game.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -106,6 +108,7 @@
         </entry>
       </map>
     </option>
+    <option name="oldMeFiltersMigrated" value="true" />
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Changes" />
